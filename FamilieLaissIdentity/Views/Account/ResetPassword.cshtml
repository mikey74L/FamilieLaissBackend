@using Microsoft.AspNetCore.Mvc.Localization

@inject IViewLocalizer Localizer

@model FamilieLaissIdentity.Models.Account.ResetPasswordViewModel;

@{
    ViewData["Title"] = Localizer["View_Title"];
}

<!-- Die spezifischen Styles für die aktuelle Seite einbinden -->
@section Styles {
    <link href="~/css/pages/login-register-lock.css" rel="stylesheet" />
    <link href="~/css/pages/floating-label.css" rel="stylesheet" />
}

<!-- ============================================================== -->
<!-- Preloader - Style befindet sich in spinners.css                -->
<!-- ============================================================== -->
<div class="preloader">
    <div class="loader">
        <div class="loader__figure"></div>
        <p class="loader__label">Admin Pro</p>
    </div>
</div>

<!-- ============================================================== -->
<!-- Ausgeben des Forumlars zum Setzen des neuen Passworts          -->
<!-- ============================================================== -->
<section id="wrapper" class="login-register login-sidebar" style="background-image: url(/Images/Login_Register_Background_2.jpg)">
    <div class="login-box card">
        <div id="slimscroll_Login" class="card-body">
            <!-- Ausgeben der Überschrift-->
            <h3 class="text-center">@Localizer["View_Heading"]</h3>

            <!-- Ausgeben des Formulars -->
            <form id="formResetPassword" class="floating-labels m-t-40" asp-controller="Account" asp-action="ResetPassword" method="post">
                <!-- Hinzufügen der versteckten Daten die für den PostBack benötigt werden-->
                @Html.HiddenFor(Model => Model.UserId)
                @Html.HiddenFor(Model => Model.Token)

                <!-- Wenn eine Exception, oder ein allgemeiner Fehler aufgetreten ist dann wird ein entsprechender -->
                <!-- Alert ausgegeben -->
                @if (!ViewData.ModelState.IsValid && (ViewData.ModelState.ContainsKey("Exception") ||
               ViewData.ModelState.ContainsKey("UserNotFound") ||
               ViewData.ModelState.ContainsKey("Token")))
                {
                    <!-- Ausgeben eines Alerts für eine Exception-->
                    <div class="alert alert-danger m-t-40">
                        <h3 class="text-danger">
                            <i class="fa fa-exclamation-triangle"></i>

                            @if (ViewData.ModelState.ContainsKey("Exception") && ViewData.ModelState["Exception"].Errors.Count > 0)
                            {
                                @Localizer["Alert_Exception_Header"]
                            }
                            @if (ViewData.ModelState.ContainsKey("UserNotFound") && ViewData.ModelState["UserNotFound"].Errors.Count > 0)
                            {
                                @Localizer["Alert_User_Header"]
                            }
                            @if (ViewData.ModelState.ContainsKey("Token") && ViewData.ModelState["Token"].Errors.Count > 0)
                            {
                                @Localizer["Alert_Token_Header"]
                            }
                        </h3>
                        @if (ViewData.ModelState.ContainsKey("Exception") && ViewData.ModelState["Exception"].Errors.Count > 0)
                        {
                            @ViewData.ModelState["Exception"].Errors.First().ErrorMessage
                        }
                        @if (ViewData.ModelState.ContainsKey("UserNotFound") && ViewData.ModelState["UserNotFound"].Errors.Count > 0)
                        {
                            @ViewData.ModelState["UserNotFound"].Errors.First().ErrorMessage
                        }
                        @if (ViewData.ModelState.ContainsKey("Token") && ViewData.ModelState["Token"].Errors.Count > 0)
                        {
                            @ViewData.ModelState["Token"].Errors.First().ErrorMessage
                        }
                    </div>
                }
                else
                {

                    <!-- Eingabebereich für Passwort -->
                    @if (!ViewData.ModelState.IsValid && ViewData.ModelState["NewPassword"].Errors.Count > 0)
                    {
                        <div class="form-group col-xs-12 m-b-30 has-danger has-error">
                            <input asp-for="NewPassword" class="form-control" />
                            <span class="bar"></span>
                            <label asp-for="NewPassword"></label>
                            <div class="form-control-feedback">@ViewData.ModelState["NewPassword"].Errors.First().ErrorMessage</div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group col-xs-12 m-b-30">
                            <input asp-for="NewPassword" class="form-control" />
                            <span class="bar"></span>
                            <label asp-for="NewPassword"></label>
                        </div>
                    }

                    <!-- Eingabebereich für Passwort-Bestätigung -->
                    @if (!ViewData.ModelState.IsValid && ViewData.ModelState["PasswordConfirmation"].Errors.Count > 0)
                    {
                        <div class="form-group col-xs-12 m-b-30 has-danger has-error">
                            <input asp-for="PasswordConfirmation" class="form-control" />
                            <span class="bar"></span>
                            <label asp-for="PasswordConfirmation"></label>
                            <div class="form-control-feedback">@ViewData.ModelState["PasswordConfirmation"].Errors.First().ErrorMessage</div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group col-xs-12 m-b-30">
                            <input asp-for="PasswordConfirmation" class="form-control" />
                            <span class="bar"></span>
                            <label asp-for="PasswordConfirmation"></label>
                        </div>
                    }

                    <!-- Ausgeben des Buttons -->
                    <div class="form-group text-center m-t-20">
                        <div class="col-xs-12">
                            <button class="btn btn-info btn-lg btn-block waves-effect waves-light text-uppercase btn-rounded" type="submit">@Localizer["btn_Change_Password"]</button>
                        </div>
                    </div>
                }
            </form>
        </div>
    </div>
</section>

<!-- Scripte für die Seite hinzufügen -->
@section Scripts {
    <!--Custom JavaScript für Preloader -->
    <script type="text/javascript">
        $(function () {
            $(".preloader").fadeOut();
        });
    </script>

    <!-- Custom JavaScript für Floating-Labels -->
    <script type="text/javascript">
        $('.floating-labels .form-control').on('focus blur', function (e) {
            $(this).parents('.form-group').toggleClass('focused', (e.type === 'focus' || this.value.length > 0));
        }).trigger('blur');
    </script>
}
